{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/humoyun/Desktop/my-project/my-task/src/app/form/Form.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { CloseCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport { Checkbox, Input, InputNumber, InputRef, Tag, theme } from \"antd\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\n\r\nexport default function Form() {\r\n    const { token } = theme.useToken();\r\n    const [tags, setTags] = useState<string[]>([]);\r\n    const [inputVisible, setInputVisible] = useState(false);\r\n    const [inputValue, setInputValue] = useState('');\r\n    const inputRef = useRef<InputRef>(null);\r\n    const [sliderValue, setSliderValue] = useState<{ FromSlider: number; ToSlider: number }>({\r\n        FromSlider: 0,\r\n        ToSlider: 0\r\n    });\r\n    const [autoResponses, setAutoResponses] = useState(false); // Для чекбокса\r\n\r\n    // Обработчик для изменения значений слайдера\r\n    const handleSliderChange = (value: number, type: 'FromSlider' | 'ToSlider') => {\r\n        setSliderValue((prev) => ({\r\n            ...prev,\r\n            [type]: value\r\n        }));\r\n    };\r\n\r\n    // Для автоподсказок\r\n    useEffect(() => {\r\n        if (inputVisible) {\r\n            inputRef.current?.focus();\r\n        }\r\n    }, [inputVisible]);\r\n\r\n    const handleClose = (removedTag: string) => {\r\n        const newTags = tags.filter((tag) => tag !== removedTag);\r\n        setTags(newTags);\r\n    };\r\n\r\n    const showInput = () => {\r\n        setInputVisible(true);\r\n    };\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleInputConfirm = () => {\r\n        if (inputValue && tags.indexOf(inputValue) === -1) {\r\n            setTags([...tags, inputValue]);\r\n        }\r\n        setInputVisible(false);\r\n        setInputValue('');\r\n    };\r\n\r\n    const forMap = (tag: string) => (\r\n        <span key={tag} style={{ display: 'inline-block' }}>\r\n            <Tag\r\n                closable\r\n                onClose={(e) => {\r\n                    e.preventDefault();\r\n                    handleClose(tag);\r\n                }}\r\n            >\r\n                {tag}\r\n            </Tag>\r\n        </span>\r\n    );\r\n\r\n    const tagPlusStyle: React.CSSProperties = {\r\n        background: token.colorBgContainer,\r\n        borderStyle: 'dashed',\r\n    };\r\n\r\n    return (\r\n        <form className=\"max-w-md mx-auto p-4 bg-white shadow rounded\">\r\n            <h2 className=\"text-lg text-cyan-700 font-semibold mb-4\">Создать задачу</h2>\r\n            <Input className=\"w-full mb-5 p-2 border rounded\" placeholder=\"Название задачи\" />\r\n            <Input className=\"w-full p-2 border rounded\" placeholder=\"Описание\" />\r\n\r\n            {/* Добавление тега */}\r\n            <div className=\"pt-5\">\r\n                <div>\r\n                    <span className=\"text-cyan-700 text-sm\">Добавить теги</span>\r\n                </div>\r\n                {tags.map(forMap)}\r\n                {inputVisible ? (\r\n                    <Input\r\n                        ref={inputRef}\r\n                        type=\"text\"\r\n                        size=\"small\"\r\n                        style={{ width: 78 }}\r\n                        value={inputValue}\r\n                        onChange={handleInputChange}\r\n                        onBlur={handleInputConfirm}\r\n                        onPressEnter={handleInputConfirm}\r\n                    />\r\n                ) : (\r\n                    <Tag onClick={showInput} style={tagPlusStyle}>\r\n                        <PlusOutlined /> Добавить\r\n                    </Tag>\r\n                )}\r\n            </div>\r\n\r\n            {/* Слайдеры */}\r\n            <div>\r\n                <label className=\"text-cyan-700 text-sm\">\r\n                    Минимальный бюджет\r\n                </label>\r\n                <Input\r\n                    type=\"number\"\r\n                    value={sliderValue.FromSlider}\r\n                    onChange={(e) => handleSliderChange(Number(e.target.value), 'FromSlider')}\r\n                />\r\n                <label className=\"text-cyan-700 text-sm\">\r\n                    Максимальный бюджет\r\n                </label>\r\n                <Input\r\n                    type=\"number\"\r\n                    value={sliderValue.ToSlider}\r\n                    onChange={(e) => handleSliderChange(Number(e.target.value), 'ToSlider')}\r\n                />\r\n            </div>\r\n\r\n            {/* Срок в днях */}\r\n            <div>\r\n                <label className=\"text-cyan-700 text-sm\">Срок в днях</label>\r\n                <Input\r\n                    type=\"number\"\r\n                    defaultValue={1}\r\n                />\r\n            </div>\r\n\r\n            {/* Количество напоминаний */}\r\n            <div>\r\n                <div>\r\n                    <span className=\"text-cyan-700 text-sm\">Количество напоминаний</span>\r\n                </div>\r\n                <InputNumber defaultValue={1} />\r\n            </div>\r\n\r\n            {/* Чекбокс для включения автоматических ответов */}\r\n            <div className=\"flex items-center space-x-2 pt-2\">\r\n                <Checkbox\r\n                    id=\"allAutoResponses\"\r\n                    checked={autoResponses}\r\n                    onChange={(e) => setAutoResponses(e.target.checked)}\r\n                    className=\"h-4 w-4 text-blue-600 border-gray-300 rounded\"\r\n                />\r\n                <label className=\"text-sm text-gray-700\">Включить автоматические ответы</label>\r\n            </div>\r\n\r\n            {/* Кнопка отправки */}\r\n            <button className=\"mt-4 w-full bg-blue-500 text-white py-2 rounded\">Отправить</button>\r\n        </form>\r\n    );\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 328, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}